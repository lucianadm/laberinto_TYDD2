// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/01/2024 20:58:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matriz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matriz_vlg_sample_tst(
	clk,
	D_Abajo,
	D_Adelante,
	D_Arriba,
	D_Atras,
	EN,
	LEE1,
	LEE2,
	LEE3,
	num_casillero,
	reset,
	sampler_tx
);
input  clk;
input  D_Abajo;
input  D_Adelante;
input  D_Arriba;
input  D_Atras;
input  EN;
input [3:0] LEE1;
input [3:0] LEE2;
input [3:0] LEE3;
input [3:0] num_casillero;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or D_Abajo or D_Adelante or D_Arriba or D_Atras or EN or LEE1 or LEE2 or LEE3 or num_casillero or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matriz_vlg_check_tst (
	accion,
	C0,
	C2,
	C3,
	C4,
	C5,
	C6,
	C7,
	C8,
	C9,
	C10,
	C11,
	C12,
	C13,
	C14,
	C15,
	CE1,
	vecino0,
	vecino1,
	vecino2,
	Y15,
	sampler_rx
);
input [1:0] accion;
input [3:0] C0;
input [3:0] C2;
input [3:0] C3;
input [3:0] C4;
input [3:0] C5;
input [3:0] C6;
input [3:0] C7;
input [3:0] C8;
input [3:0] C9;
input [3:0] C10;
input [3:0] C11;
input [3:0] C12;
input [3:0] C13;
input [3:0] C14;
input [3:0] C15;
input [3:0] CE1;
input [3:0] vecino0;
input [3:0] vecino1;
input [3:0] vecino2;
input  Y15;
input sampler_rx;

reg [1:0] accion_expected;
reg [3:0] C0_expected;
reg [3:0] C2_expected;
reg [3:0] C3_expected;
reg [3:0] C4_expected;
reg [3:0] C5_expected;
reg [3:0] C6_expected;
reg [3:0] C7_expected;
reg [3:0] C8_expected;
reg [3:0] C9_expected;
reg [3:0] C10_expected;
reg [3:0] C11_expected;
reg [3:0] C12_expected;
reg [3:0] C13_expected;
reg [3:0] C14_expected;
reg [3:0] C15_expected;
reg [3:0] CE1_expected;
reg [3:0] vecino0_expected;
reg [3:0] vecino1_expected;
reg [3:0] vecino2_expected;
reg  Y15_expected;

reg [1:0] accion_prev;
reg [3:0] C0_prev;
reg [3:0] C2_prev;
reg [3:0] C3_prev;
reg [3:0] C4_prev;
reg [3:0] C5_prev;
reg [3:0] C6_prev;
reg [3:0] C7_prev;
reg [3:0] C8_prev;
reg [3:0] C9_prev;
reg [3:0] C10_prev;
reg [3:0] C11_prev;
reg [3:0] C12_prev;
reg [3:0] C13_prev;
reg [3:0] C14_prev;
reg [3:0] C15_prev;
reg [3:0] CE1_prev;
reg [3:0] vecino0_prev;
reg [3:0] vecino1_prev;
reg [3:0] vecino2_prev;
reg  Y15_prev;

reg [1:0] accion_expected_prev;
reg [3:0] C0_expected_prev;
reg [3:0] C2_expected_prev;
reg [3:0] C3_expected_prev;
reg [3:0] C4_expected_prev;
reg [3:0] C5_expected_prev;
reg [3:0] C6_expected_prev;
reg [3:0] C7_expected_prev;
reg [3:0] C8_expected_prev;
reg [3:0] C9_expected_prev;
reg [3:0] C10_expected_prev;
reg [3:0] C11_expected_prev;
reg [3:0] C12_expected_prev;
reg [3:0] C13_expected_prev;
reg [3:0] C14_expected_prev;
reg [3:0] C15_expected_prev;
reg [3:0] CE1_expected_prev;
reg [3:0] vecino0_expected_prev;
reg [3:0] vecino1_expected_prev;
reg  Y15_expected_prev;

reg [1:0] last_accion_exp;
reg [3:0] last_C0_exp;
reg [3:0] last_C2_exp;
reg [3:0] last_C3_exp;
reg [3:0] last_C4_exp;
reg [3:0] last_C5_exp;
reg [3:0] last_C6_exp;
reg [3:0] last_C7_exp;
reg [3:0] last_C8_exp;
reg [3:0] last_C9_exp;
reg [3:0] last_C10_exp;
reg [3:0] last_C11_exp;
reg [3:0] last_C12_exp;
reg [3:0] last_C13_exp;
reg [3:0] last_C14_exp;
reg [3:0] last_C15_exp;
reg [3:0] last_CE1_exp;
reg [3:0] last_vecino0_exp;
reg [3:0] last_vecino1_exp;
reg  last_Y15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	accion_prev = accion;
	C0_prev = C0;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	C5_prev = C5;
	C6_prev = C6;
	C7_prev = C7;
	C8_prev = C8;
	C9_prev = C9;
	C10_prev = C10;
	C11_prev = C11;
	C12_prev = C12;
	C13_prev = C13;
	C14_prev = C14;
	C15_prev = C15;
	CE1_prev = CE1;
	vecino0_prev = vecino0;
	vecino1_prev = vecino1;
	vecino2_prev = vecino2;
	Y15_prev = Y15;
end

// update expected /o prevs

always @(trigger)
begin
	accion_expected_prev = accion_expected;
	C0_expected_prev = C0_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	C4_expected_prev = C4_expected;
	C5_expected_prev = C5_expected;
	C6_expected_prev = C6_expected;
	C7_expected_prev = C7_expected;
	C8_expected_prev = C8_expected;
	C9_expected_prev = C9_expected;
	C10_expected_prev = C10_expected;
	C11_expected_prev = C11_expected;
	C12_expected_prev = C12_expected;
	C13_expected_prev = C13_expected;
	C14_expected_prev = C14_expected;
	C15_expected_prev = C15_expected;
	CE1_expected_prev = CE1_expected;
	vecino0_expected_prev = vecino0_expected;
	vecino1_expected_prev = vecino1_expected;
	Y15_expected_prev = Y15_expected;
end


// expected accion[ 1 ]
initial
begin
	accion_expected[1] = 1'bX;
end 
// expected accion[ 0 ]
initial
begin
	accion_expected[0] = 1'bX;
end 
// expected C0[ 3 ]
initial
begin
	C0_expected[3] = 1'bX;
end 
// expected C0[ 2 ]
initial
begin
	C0_expected[2] = 1'bX;
end 
// expected C0[ 1 ]
initial
begin
	C0_expected[1] = 1'bX;
end 
// expected C0[ 0 ]
initial
begin
	C0_expected[0] = 1'bX;
end 
// expected CE1[ 3 ]
initial
begin
	CE1_expected[3] = 1'bX;
end 
// expected CE1[ 2 ]
initial
begin
	CE1_expected[2] = 1'bX;
end 
// expected CE1[ 1 ]
initial
begin
	CE1_expected[1] = 1'bX;
end 
// expected CE1[ 0 ]
initial
begin
	CE1_expected[0] = 1'bX;
end 
// expected C2[ 3 ]
initial
begin
	C2_expected[3] = 1'bX;
end 
// expected C2[ 2 ]
initial
begin
	C2_expected[2] = 1'bX;
end 
// expected C2[ 1 ]
initial
begin
	C2_expected[1] = 1'bX;
end 
// expected C2[ 0 ]
initial
begin
	C2_expected[0] = 1'bX;
end 
// expected C3[ 3 ]
initial
begin
	C3_expected[3] = 1'bX;
end 
// expected C3[ 2 ]
initial
begin
	C3_expected[2] = 1'bX;
end 
// expected C3[ 1 ]
initial
begin
	C3_expected[1] = 1'bX;
end 
// expected C3[ 0 ]
initial
begin
	C3_expected[0] = 1'bX;
end 
// expected C4[ 3 ]
initial
begin
	C4_expected[3] = 1'bX;
end 
// expected C4[ 2 ]
initial
begin
	C4_expected[2] = 1'bX;
end 
// expected C4[ 1 ]
initial
begin
	C4_expected[1] = 1'bX;
end 
// expected C4[ 0 ]
initial
begin
	C4_expected[0] = 1'bX;
end 
// expected C5[ 3 ]
initial
begin
	C5_expected[3] = 1'bX;
end 
// expected C5[ 2 ]
initial
begin
	C5_expected[2] = 1'bX;
end 
// expected C5[ 1 ]
initial
begin
	C5_expected[1] = 1'bX;
end 
// expected C5[ 0 ]
initial
begin
	C5_expected[0] = 1'bX;
end 
// expected C6[ 3 ]
initial
begin
	C6_expected[3] = 1'bX;
end 
// expected C6[ 2 ]
initial
begin
	C6_expected[2] = 1'bX;
end 
// expected C6[ 1 ]
initial
begin
	C6_expected[1] = 1'bX;
end 
// expected C6[ 0 ]
initial
begin
	C6_expected[0] = 1'bX;
end 
// expected C7[ 3 ]
initial
begin
	C7_expected[3] = 1'bX;
end 
// expected C7[ 2 ]
initial
begin
	C7_expected[2] = 1'bX;
end 
// expected C7[ 1 ]
initial
begin
	C7_expected[1] = 1'bX;
end 
// expected C7[ 0 ]
initial
begin
	C7_expected[0] = 1'bX;
end 
// expected C8[ 3 ]
initial
begin
	C8_expected[3] = 1'bX;
end 
// expected C8[ 2 ]
initial
begin
	C8_expected[2] = 1'bX;
end 
// expected C8[ 1 ]
initial
begin
	C8_expected[1] = 1'bX;
end 
// expected C8[ 0 ]
initial
begin
	C8_expected[0] = 1'bX;
end 
// expected C9[ 3 ]
initial
begin
	C9_expected[3] = 1'bX;
end 
// expected C9[ 2 ]
initial
begin
	C9_expected[2] = 1'bX;
end 
// expected C9[ 1 ]
initial
begin
	C9_expected[1] = 1'bX;
end 
// expected C9[ 0 ]
initial
begin
	C9_expected[0] = 1'bX;
end 
// expected C10[ 3 ]
initial
begin
	C10_expected[3] = 1'bX;
end 
// expected C10[ 2 ]
initial
begin
	C10_expected[2] = 1'bX;
end 
// expected C10[ 1 ]
initial
begin
	C10_expected[1] = 1'bX;
end 
// expected C10[ 0 ]
initial
begin
	C10_expected[0] = 1'bX;
end 
// expected C11[ 3 ]
initial
begin
	C11_expected[3] = 1'bX;
end 
// expected C11[ 2 ]
initial
begin
	C11_expected[2] = 1'bX;
end 
// expected C11[ 1 ]
initial
begin
	C11_expected[1] = 1'bX;
end 
// expected C11[ 0 ]
initial
begin
	C11_expected[0] = 1'bX;
end 
// expected C12[ 3 ]
initial
begin
	C12_expected[3] = 1'bX;
end 
// expected C12[ 2 ]
initial
begin
	C12_expected[2] = 1'bX;
end 
// expected C12[ 1 ]
initial
begin
	C12_expected[1] = 1'bX;
end 
// expected C12[ 0 ]
initial
begin
	C12_expected[0] = 1'bX;
end 
// expected C13[ 3 ]
initial
begin
	C13_expected[3] = 1'bX;
end 
// expected C13[ 2 ]
initial
begin
	C13_expected[2] = 1'bX;
end 
// expected C13[ 1 ]
initial
begin
	C13_expected[1] = 1'bX;
end 
// expected C13[ 0 ]
initial
begin
	C13_expected[0] = 1'bX;
end 
// expected C14[ 3 ]
initial
begin
	C14_expected[3] = 1'bX;
end 
// expected C14[ 2 ]
initial
begin
	C14_expected[2] = 1'bX;
end 
// expected C14[ 1 ]
initial
begin
	C14_expected[1] = 1'bX;
end 
// expected C14[ 0 ]
initial
begin
	C14_expected[0] = 1'bX;
end 
// expected C15[ 3 ]
initial
begin
	C15_expected[3] = 1'bX;
end 
// expected C15[ 2 ]
initial
begin
	C15_expected[2] = 1'bX;
end 
// expected C15[ 1 ]
initial
begin
	C15_expected[1] = 1'bX;
end 
// expected C15[ 0 ]
initial
begin
	C15_expected[0] = 1'bX;
end 
// expected vecino0[ 3 ]
initial
begin
	vecino0_expected[3] = 1'bX;
end 
// expected vecino0[ 2 ]
initial
begin
	vecino0_expected[2] = 1'bX;
end 
// expected vecino0[ 1 ]
initial
begin
	vecino0_expected[1] = 1'bX;
end 
// expected vecino0[ 0 ]
initial
begin
	vecino0_expected[0] = 1'bX;
end 
// expected vecino1[ 3 ]
initial
begin
	vecino1_expected[3] = 1'bX;
end 
// expected vecino1[ 2 ]
initial
begin
	vecino1_expected[2] = 1'bX;
end 
// expected vecino1[ 1 ]
initial
begin
	vecino1_expected[1] = 1'bX;
end 
// expected vecino1[ 0 ]
initial
begin
	vecino1_expected[0] = 1'bX;
end 

// expected Y15
initial
begin
	Y15_expected = 1'bX;
end 
// generate trigger
always @(accion_expected or accion or C0_expected or C0 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or C5_expected or C5 or C6_expected or C6 or C7_expected or C7 or C8_expected or C8 or C9_expected or C9 or C10_expected or C10 or C11_expected or C11 or C12_expected or C12 or C13_expected or C13 or C14_expected or C14 or C15_expected or C15 or CE1_expected or CE1 or vecino0_expected or vecino0 or vecino1_expected or vecino1 or vecino2_expected or vecino2 or Y15_expected or Y15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected accion = %b | expected C0 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected C5 = %b | expected C6 = %b | expected C7 = %b | expected C8 = %b | expected C9 = %b | expected C10 = %b | expected C11 = %b | expected C12 = %b | expected C13 = %b | expected C14 = %b | expected C15 = %b | expected CE1 = %b | expected vecino0 = %b | expected vecino1 = %b | expected vecino2 = %b | expected Y15 = %b | ",accion_expected_prev,C0_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,C5_expected_prev,C6_expected_prev,C7_expected_prev,C8_expected_prev,C9_expected_prev,C10_expected_prev,C11_expected_prev,C12_expected_prev,C13_expected_prev,C14_expected_prev,C15_expected_prev,CE1_expected_prev,vecino0_expected_prev,vecino1_expected_prev,vecino2_expected_prev,Y15_expected_prev);
	$display("| real accion = %b | real C0 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real C5 = %b | real C6 = %b | real C7 = %b | real C8 = %b | real C9 = %b | real C10 = %b | real C11 = %b | real C12 = %b | real C13 = %b | real C14 = %b | real C15 = %b | real CE1 = %b | real vecino0 = %b | real vecino1 = %b | real vecino2 = %b | real Y15 = %b | ",accion_prev,C0_prev,C2_prev,C3_prev,C4_prev,C5_prev,C6_prev,C7_prev,C8_prev,C9_prev,C10_prev,C11_prev,C12_prev,C13_prev,C14_prev,C15_prev,CE1_prev,vecino0_prev,vecino1_prev,vecino2_prev,Y15_prev);
`endif
	if (
		( accion_expected_prev[0] !== 1'bx ) && ( accion_prev[0] !== accion_expected_prev[0] )
		&& ((accion_expected_prev[0] !== last_accion_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_expected_prev);
		$display ("     Real value = %b", accion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_accion_exp[0] = accion_expected_prev[0];
	end
	if (
		( accion_expected_prev[1] !== 1'bx ) && ( accion_prev[1] !== accion_expected_prev[1] )
		&& ((accion_expected_prev[1] !== last_accion_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_expected_prev);
		$display ("     Real value = %b", accion_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_accion_exp[1] = accion_expected_prev[1];
	end
	if (
		( C0_expected_prev[0] !== 1'bx ) && ( C0_prev[0] !== C0_expected_prev[0] )
		&& ((C0_expected_prev[0] !== last_C0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C0_exp[0] = C0_expected_prev[0];
	end
	if (
		( C0_expected_prev[1] !== 1'bx ) && ( C0_prev[1] !== C0_expected_prev[1] )
		&& ((C0_expected_prev[1] !== last_C0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C0_exp[1] = C0_expected_prev[1];
	end
	if (
		( C0_expected_prev[2] !== 1'bx ) && ( C0_prev[2] !== C0_expected_prev[2] )
		&& ((C0_expected_prev[2] !== last_C0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C0_exp[2] = C0_expected_prev[2];
	end
	if (
		( C0_expected_prev[3] !== 1'bx ) && ( C0_prev[3] !== C0_expected_prev[3] )
		&& ((C0_expected_prev[3] !== last_C0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C0_exp[3] = C0_expected_prev[3];
	end
	if (
		( C2_expected_prev[0] !== 1'bx ) && ( C2_prev[0] !== C2_expected_prev[0] )
		&& ((C2_expected_prev[0] !== last_C2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp[0] = C2_expected_prev[0];
	end
	if (
		( C2_expected_prev[1] !== 1'bx ) && ( C2_prev[1] !== C2_expected_prev[1] )
		&& ((C2_expected_prev[1] !== last_C2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp[1] = C2_expected_prev[1];
	end
	if (
		( C2_expected_prev[2] !== 1'bx ) && ( C2_prev[2] !== C2_expected_prev[2] )
		&& ((C2_expected_prev[2] !== last_C2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp[2] = C2_expected_prev[2];
	end
	if (
		( C2_expected_prev[3] !== 1'bx ) && ( C2_prev[3] !== C2_expected_prev[3] )
		&& ((C2_expected_prev[3] !== last_C2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C2_exp[3] = C2_expected_prev[3];
	end
	if (
		( C3_expected_prev[0] !== 1'bx ) && ( C3_prev[0] !== C3_expected_prev[0] )
		&& ((C3_expected_prev[0] !== last_C3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp[0] = C3_expected_prev[0];
	end
	if (
		( C3_expected_prev[1] !== 1'bx ) && ( C3_prev[1] !== C3_expected_prev[1] )
		&& ((C3_expected_prev[1] !== last_C3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp[1] = C3_expected_prev[1];
	end
	if (
		( C3_expected_prev[2] !== 1'bx ) && ( C3_prev[2] !== C3_expected_prev[2] )
		&& ((C3_expected_prev[2] !== last_C3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp[2] = C3_expected_prev[2];
	end
	if (
		( C3_expected_prev[3] !== 1'bx ) && ( C3_prev[3] !== C3_expected_prev[3] )
		&& ((C3_expected_prev[3] !== last_C3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C3_exp[3] = C3_expected_prev[3];
	end
	if (
		( C4_expected_prev[0] !== 1'bx ) && ( C4_prev[0] !== C4_expected_prev[0] )
		&& ((C4_expected_prev[0] !== last_C4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C4_exp[0] = C4_expected_prev[0];
	end
	if (
		( C4_expected_prev[1] !== 1'bx ) && ( C4_prev[1] !== C4_expected_prev[1] )
		&& ((C4_expected_prev[1] !== last_C4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C4_exp[1] = C4_expected_prev[1];
	end
	if (
		( C4_expected_prev[2] !== 1'bx ) && ( C4_prev[2] !== C4_expected_prev[2] )
		&& ((C4_expected_prev[2] !== last_C4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C4_exp[2] = C4_expected_prev[2];
	end
	if (
		( C4_expected_prev[3] !== 1'bx ) && ( C4_prev[3] !== C4_expected_prev[3] )
		&& ((C4_expected_prev[3] !== last_C4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C4_exp[3] = C4_expected_prev[3];
	end
	if (
		( C5_expected_prev[0] !== 1'bx ) && ( C5_prev[0] !== C5_expected_prev[0] )
		&& ((C5_expected_prev[0] !== last_C5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C5_exp[0] = C5_expected_prev[0];
	end
	if (
		( C5_expected_prev[1] !== 1'bx ) && ( C5_prev[1] !== C5_expected_prev[1] )
		&& ((C5_expected_prev[1] !== last_C5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C5_exp[1] = C5_expected_prev[1];
	end
	if (
		( C5_expected_prev[2] !== 1'bx ) && ( C5_prev[2] !== C5_expected_prev[2] )
		&& ((C5_expected_prev[2] !== last_C5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C5_exp[2] = C5_expected_prev[2];
	end
	if (
		( C5_expected_prev[3] !== 1'bx ) && ( C5_prev[3] !== C5_expected_prev[3] )
		&& ((C5_expected_prev[3] !== last_C5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C5_exp[3] = C5_expected_prev[3];
	end
	if (
		( C6_expected_prev[0] !== 1'bx ) && ( C6_prev[0] !== C6_expected_prev[0] )
		&& ((C6_expected_prev[0] !== last_C6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C6_exp[0] = C6_expected_prev[0];
	end
	if (
		( C6_expected_prev[1] !== 1'bx ) && ( C6_prev[1] !== C6_expected_prev[1] )
		&& ((C6_expected_prev[1] !== last_C6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C6_exp[1] = C6_expected_prev[1];
	end
	if (
		( C6_expected_prev[2] !== 1'bx ) && ( C6_prev[2] !== C6_expected_prev[2] )
		&& ((C6_expected_prev[2] !== last_C6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C6_exp[2] = C6_expected_prev[2];
	end
	if (
		( C6_expected_prev[3] !== 1'bx ) && ( C6_prev[3] !== C6_expected_prev[3] )
		&& ((C6_expected_prev[3] !== last_C6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C6_exp[3] = C6_expected_prev[3];
	end
	if (
		( C7_expected_prev[0] !== 1'bx ) && ( C7_prev[0] !== C7_expected_prev[0] )
		&& ((C7_expected_prev[0] !== last_C7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C7_exp[0] = C7_expected_prev[0];
	end
	if (
		( C7_expected_prev[1] !== 1'bx ) && ( C7_prev[1] !== C7_expected_prev[1] )
		&& ((C7_expected_prev[1] !== last_C7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C7_exp[1] = C7_expected_prev[1];
	end
	if (
		( C7_expected_prev[2] !== 1'bx ) && ( C7_prev[2] !== C7_expected_prev[2] )
		&& ((C7_expected_prev[2] !== last_C7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C7_exp[2] = C7_expected_prev[2];
	end
	if (
		( C7_expected_prev[3] !== 1'bx ) && ( C7_prev[3] !== C7_expected_prev[3] )
		&& ((C7_expected_prev[3] !== last_C7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C7_exp[3] = C7_expected_prev[3];
	end
	if (
		( C8_expected_prev[0] !== 1'bx ) && ( C8_prev[0] !== C8_expected_prev[0] )
		&& ((C8_expected_prev[0] !== last_C8_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C8_exp[0] = C8_expected_prev[0];
	end
	if (
		( C8_expected_prev[1] !== 1'bx ) && ( C8_prev[1] !== C8_expected_prev[1] )
		&& ((C8_expected_prev[1] !== last_C8_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C8_exp[1] = C8_expected_prev[1];
	end
	if (
		( C8_expected_prev[2] !== 1'bx ) && ( C8_prev[2] !== C8_expected_prev[2] )
		&& ((C8_expected_prev[2] !== last_C8_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C8_exp[2] = C8_expected_prev[2];
	end
	if (
		( C8_expected_prev[3] !== 1'bx ) && ( C8_prev[3] !== C8_expected_prev[3] )
		&& ((C8_expected_prev[3] !== last_C8_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C8_exp[3] = C8_expected_prev[3];
	end
	if (
		( C9_expected_prev[0] !== 1'bx ) && ( C9_prev[0] !== C9_expected_prev[0] )
		&& ((C9_expected_prev[0] !== last_C9_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C9_exp[0] = C9_expected_prev[0];
	end
	if (
		( C9_expected_prev[1] !== 1'bx ) && ( C9_prev[1] !== C9_expected_prev[1] )
		&& ((C9_expected_prev[1] !== last_C9_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C9_exp[1] = C9_expected_prev[1];
	end
	if (
		( C9_expected_prev[2] !== 1'bx ) && ( C9_prev[2] !== C9_expected_prev[2] )
		&& ((C9_expected_prev[2] !== last_C9_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C9_exp[2] = C9_expected_prev[2];
	end
	if (
		( C9_expected_prev[3] !== 1'bx ) && ( C9_prev[3] !== C9_expected_prev[3] )
		&& ((C9_expected_prev[3] !== last_C9_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C9_exp[3] = C9_expected_prev[3];
	end
	if (
		( C10_expected_prev[0] !== 1'bx ) && ( C10_prev[0] !== C10_expected_prev[0] )
		&& ((C10_expected_prev[0] !== last_C10_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C10_exp[0] = C10_expected_prev[0];
	end
	if (
		( C10_expected_prev[1] !== 1'bx ) && ( C10_prev[1] !== C10_expected_prev[1] )
		&& ((C10_expected_prev[1] !== last_C10_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C10_exp[1] = C10_expected_prev[1];
	end
	if (
		( C10_expected_prev[2] !== 1'bx ) && ( C10_prev[2] !== C10_expected_prev[2] )
		&& ((C10_expected_prev[2] !== last_C10_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C10_exp[2] = C10_expected_prev[2];
	end
	if (
		( C10_expected_prev[3] !== 1'bx ) && ( C10_prev[3] !== C10_expected_prev[3] )
		&& ((C10_expected_prev[3] !== last_C10_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C10_exp[3] = C10_expected_prev[3];
	end
	if (
		( C11_expected_prev[0] !== 1'bx ) && ( C11_prev[0] !== C11_expected_prev[0] )
		&& ((C11_expected_prev[0] !== last_C11_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C11_exp[0] = C11_expected_prev[0];
	end
	if (
		( C11_expected_prev[1] !== 1'bx ) && ( C11_prev[1] !== C11_expected_prev[1] )
		&& ((C11_expected_prev[1] !== last_C11_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C11_exp[1] = C11_expected_prev[1];
	end
	if (
		( C11_expected_prev[2] !== 1'bx ) && ( C11_prev[2] !== C11_expected_prev[2] )
		&& ((C11_expected_prev[2] !== last_C11_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C11_exp[2] = C11_expected_prev[2];
	end
	if (
		( C11_expected_prev[3] !== 1'bx ) && ( C11_prev[3] !== C11_expected_prev[3] )
		&& ((C11_expected_prev[3] !== last_C11_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C11_exp[3] = C11_expected_prev[3];
	end
	if (
		( C12_expected_prev[0] !== 1'bx ) && ( C12_prev[0] !== C12_expected_prev[0] )
		&& ((C12_expected_prev[0] !== last_C12_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C12_exp[0] = C12_expected_prev[0];
	end
	if (
		( C12_expected_prev[1] !== 1'bx ) && ( C12_prev[1] !== C12_expected_prev[1] )
		&& ((C12_expected_prev[1] !== last_C12_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C12_exp[1] = C12_expected_prev[1];
	end
	if (
		( C12_expected_prev[2] !== 1'bx ) && ( C12_prev[2] !== C12_expected_prev[2] )
		&& ((C12_expected_prev[2] !== last_C12_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C12_exp[2] = C12_expected_prev[2];
	end
	if (
		( C12_expected_prev[3] !== 1'bx ) && ( C12_prev[3] !== C12_expected_prev[3] )
		&& ((C12_expected_prev[3] !== last_C12_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C12_exp[3] = C12_expected_prev[3];
	end
	if (
		( C13_expected_prev[0] !== 1'bx ) && ( C13_prev[0] !== C13_expected_prev[0] )
		&& ((C13_expected_prev[0] !== last_C13_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C13_exp[0] = C13_expected_prev[0];
	end
	if (
		( C13_expected_prev[1] !== 1'bx ) && ( C13_prev[1] !== C13_expected_prev[1] )
		&& ((C13_expected_prev[1] !== last_C13_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C13_exp[1] = C13_expected_prev[1];
	end
	if (
		( C13_expected_prev[2] !== 1'bx ) && ( C13_prev[2] !== C13_expected_prev[2] )
		&& ((C13_expected_prev[2] !== last_C13_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C13_exp[2] = C13_expected_prev[2];
	end
	if (
		( C13_expected_prev[3] !== 1'bx ) && ( C13_prev[3] !== C13_expected_prev[3] )
		&& ((C13_expected_prev[3] !== last_C13_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C13_exp[3] = C13_expected_prev[3];
	end
	if (
		( C14_expected_prev[0] !== 1'bx ) && ( C14_prev[0] !== C14_expected_prev[0] )
		&& ((C14_expected_prev[0] !== last_C14_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C14_exp[0] = C14_expected_prev[0];
	end
	if (
		( C14_expected_prev[1] !== 1'bx ) && ( C14_prev[1] !== C14_expected_prev[1] )
		&& ((C14_expected_prev[1] !== last_C14_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C14_exp[1] = C14_expected_prev[1];
	end
	if (
		( C14_expected_prev[2] !== 1'bx ) && ( C14_prev[2] !== C14_expected_prev[2] )
		&& ((C14_expected_prev[2] !== last_C14_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C14_exp[2] = C14_expected_prev[2];
	end
	if (
		( C14_expected_prev[3] !== 1'bx ) && ( C14_prev[3] !== C14_expected_prev[3] )
		&& ((C14_expected_prev[3] !== last_C14_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C14_exp[3] = C14_expected_prev[3];
	end
	if (
		( C15_expected_prev[0] !== 1'bx ) && ( C15_prev[0] !== C15_expected_prev[0] )
		&& ((C15_expected_prev[0] !== last_C15_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C15_exp[0] = C15_expected_prev[0];
	end
	if (
		( C15_expected_prev[1] !== 1'bx ) && ( C15_prev[1] !== C15_expected_prev[1] )
		&& ((C15_expected_prev[1] !== last_C15_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C15_exp[1] = C15_expected_prev[1];
	end
	if (
		( C15_expected_prev[2] !== 1'bx ) && ( C15_prev[2] !== C15_expected_prev[2] )
		&& ((C15_expected_prev[2] !== last_C15_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C15_exp[2] = C15_expected_prev[2];
	end
	if (
		( C15_expected_prev[3] !== 1'bx ) && ( C15_prev[3] !== C15_expected_prev[3] )
		&& ((C15_expected_prev[3] !== last_C15_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C15_exp[3] = C15_expected_prev[3];
	end
	if (
		( CE1_expected_prev[0] !== 1'bx ) && ( CE1_prev[0] !== CE1_expected_prev[0] )
		&& ((CE1_expected_prev[0] !== last_CE1_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_CE1_exp[0] = CE1_expected_prev[0];
	end
	if (
		( CE1_expected_prev[1] !== 1'bx ) && ( CE1_prev[1] !== CE1_expected_prev[1] )
		&& ((CE1_expected_prev[1] !== last_CE1_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_CE1_exp[1] = CE1_expected_prev[1];
	end
	if (
		( CE1_expected_prev[2] !== 1'bx ) && ( CE1_prev[2] !== CE1_expected_prev[2] )
		&& ((CE1_expected_prev[2] !== last_CE1_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_CE1_exp[2] = CE1_expected_prev[2];
	end
	if (
		( CE1_expected_prev[3] !== 1'bx ) && ( CE1_prev[3] !== CE1_expected_prev[3] )
		&& ((CE1_expected_prev[3] !== last_CE1_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_CE1_exp[3] = CE1_expected_prev[3];
	end
	if (
		( vecino0_expected_prev[0] !== 1'bx ) && ( vecino0_prev[0] !== vecino0_expected_prev[0] )
		&& ((vecino0_expected_prev[0] !== last_vecino0_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino0_expected_prev);
		$display ("     Real value = %b", vecino0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_vecino0_exp[0] = vecino0_expected_prev[0];
	end
	if (
		( vecino0_expected_prev[1] !== 1'bx ) && ( vecino0_prev[1] !== vecino0_expected_prev[1] )
		&& ((vecino0_expected_prev[1] !== last_vecino0_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino0_expected_prev);
		$display ("     Real value = %b", vecino0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_vecino0_exp[1] = vecino0_expected_prev[1];
	end
	if (
		( vecino0_expected_prev[2] !== 1'bx ) && ( vecino0_prev[2] !== vecino0_expected_prev[2] )
		&& ((vecino0_expected_prev[2] !== last_vecino0_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino0_expected_prev);
		$display ("     Real value = %b", vecino0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_vecino0_exp[2] = vecino0_expected_prev[2];
	end
	if (
		( vecino0_expected_prev[3] !== 1'bx ) && ( vecino0_prev[3] !== vecino0_expected_prev[3] )
		&& ((vecino0_expected_prev[3] !== last_vecino0_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino0_expected_prev);
		$display ("     Real value = %b", vecino0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_vecino0_exp[3] = vecino0_expected_prev[3];
	end
	if (
		( vecino1_expected_prev[0] !== 1'bx ) && ( vecino1_prev[0] !== vecino1_expected_prev[0] )
		&& ((vecino1_expected_prev[0] !== last_vecino1_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino1_expected_prev);
		$display ("     Real value = %b", vecino1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_vecino1_exp[0] = vecino1_expected_prev[0];
	end
	if (
		( vecino1_expected_prev[1] !== 1'bx ) && ( vecino1_prev[1] !== vecino1_expected_prev[1] )
		&& ((vecino1_expected_prev[1] !== last_vecino1_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino1_expected_prev);
		$display ("     Real value = %b", vecino1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_vecino1_exp[1] = vecino1_expected_prev[1];
	end
	if (
		( vecino1_expected_prev[2] !== 1'bx ) && ( vecino1_prev[2] !== vecino1_expected_prev[2] )
		&& ((vecino1_expected_prev[2] !== last_vecino1_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino1_expected_prev);
		$display ("     Real value = %b", vecino1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_vecino1_exp[2] = vecino1_expected_prev[2];
	end
	if (
		( vecino1_expected_prev[3] !== 1'bx ) && ( vecino1_prev[3] !== vecino1_expected_prev[3] )
		&& ((vecino1_expected_prev[3] !== last_vecino1_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vecino1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vecino1_expected_prev);
		$display ("     Real value = %b", vecino1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_vecino1_exp[3] = vecino1_expected_prev[3];
	end
	if (
		( Y15_expected_prev !== 1'bx ) && ( Y15_prev !== Y15_expected_prev )
		&& ((Y15_expected_prev !== last_Y15_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y15_expected_prev);
		$display ("     Real value = %b", Y15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_Y15_exp = Y15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module matriz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg D_Abajo;
reg D_Adelante;
reg D_Arriba;
reg D_Atras;
reg EN;
reg [3:0] LEE1;
reg [3:0] LEE2;
reg [3:0] LEE3;
reg [3:0] num_casillero;
reg reset;
// wires                                               
wire [1:0] accion;
wire [3:0] C0;
wire [3:0] C2;
wire [3:0] C3;
wire [3:0] C4;
wire [3:0] C5;
wire [3:0] C6;
wire [3:0] C7;
wire [3:0] C8;
wire [3:0] C9;
wire [3:0] C10;
wire [3:0] C11;
wire [3:0] C12;
wire [3:0] C13;
wire [3:0] C14;
wire [3:0] C15;
wire [3:0] CE1;
wire [3:0] vecino0;
wire [3:0] vecino1;
wire [3:0] vecino2;
wire Y15;

wire sampler;                             

// assign statements (if any)                          
matriz i1 (
// port map - connection between master ports and signals/registers   
	.accion(accion),
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.clk(clk),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.EN(EN),
	.LEE1(LEE1),
	.LEE2(LEE2),
	.LEE3(LEE3),
	.num_casillero(num_casillero),
	.reset(reset),
	.vecino0(vecino0),
	.vecino1(vecino1),
	.vecino2(vecino2),
	.Y15(Y15)
);

// EN
initial
begin
	EN = 1'b1;
end 
// LEE1[ 3 ]
initial
begin
	LEE1[3] = 1'b0;
end 
// LEE1[ 2 ]
initial
begin
	LEE1[2] = 1'b0;
end 
// LEE1[ 1 ]
initial
begin
	LEE1[1] = 1'b0;
end 
// LEE1[ 0 ]
initial
begin
	LEE1[0] = 1'b0;
end 
// LEE2[ 3 ]
initial
begin
	LEE2[3] = 1'b0;
end 
// LEE2[ 2 ]
initial
begin
	LEE2[2] = 1'b0;
end 
// LEE2[ 1 ]
initial
begin
	LEE2[1] = 1'b0;
end 
// LEE2[ 0 ]
initial
begin
	LEE2[0] = 1'b0;
end 
// LEE3[ 3 ]
initial
begin
	LEE3[3] = 1'b0;
end 
// LEE3[ 2 ]
initial
begin
	LEE3[2] = 1'b0;
end 
// LEE3[ 1 ]
initial
begin
	LEE3[1] = 1'b0;
end 
// LEE3[ 0 ]
initial
begin
	LEE3[0] = 1'b0;
end 
// num_casillero[ 3 ]
initial
begin
	num_casillero[3] = 1'b1;
	num_casillero[3] = #260000 1'b0;
	num_casillero[3] = #270000 1'b1;
end 
// num_casillero[ 2 ]
initial
begin
	num_casillero[2] = 1'b1;
end 
// num_casillero[ 1 ]
initial
begin
	num_casillero[1] = 1'b1;
end 
// num_casillero[ 0 ]
initial
begin
	num_casillero[0] = 1'b1;
	num_casillero[0] = #260000 1'b0;
	num_casillero[0] = #270000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #130000 1'b0;
end 

// D_Abajo
initial
begin
	D_Abajo = 1'b0;
	D_Abajo = #390000 1'b1;
	D_Abajo = #150000 1'b0;
end 

// D_Adelante
initial
begin
	D_Adelante = 1'b0;
	D_Adelante = #260000 1'b1;
	D_Adelante = #280000 1'b0;
end 

// D_Arriba
initial
begin
	D_Arriba = 1'b0;
end 

// D_Atras
initial
begin
	D_Atras = 1'b0;
end 

matriz_vlg_sample_tst tb_sample (
	.clk(clk),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.EN(EN),
	.LEE1(LEE1),
	.LEE2(LEE2),
	.LEE3(LEE3),
	.num_casillero(num_casillero),
	.reset(reset),
	.sampler_tx(sampler)
);

matriz_vlg_check_tst tb_out(
	.accion(accion),
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.vecino0(vecino0),
	.vecino1(vecino1),
	.vecino2(vecino2),
	.Y15(Y15),
	.sampler_rx(sampler)
);
endmodule

