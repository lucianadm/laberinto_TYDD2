// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2024 21:35:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    matriz
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module matriz_vlg_sample_tst(
	clk,
	Linea,
	Muro,
	reset,
	sampler_tx
);
input  clk;
input  Linea;
input  Muro;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Linea or Muro or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module matriz_vlg_check_tst (
	Abajo,
	accion_out,
	actual,
	Adelante,
	Arriba,
	Atras,
	C0,
	C2,
	C3,
	C4,
	C5,
	C6,
	C7,
	C8,
	C9,
	C10,
	C11,
	C12,
	C13,
	C14,
	C15,
	CE1,
	D_Abajo,
	D_Adelante,
	D_Arriba,
	D_Atras,
	dir_Abajo,
	dir_Adelante,
	dir_Arriba,
	dir_Atras,
	ena_Ab,
	ena_Ad,
	ena_Ar,
	ena_At,
	Hab_accion29,
	Hab_Actual28,
	Hab_muro,
	Hab_sentido27,
	sentido,
	sentido_nw,
	Y15,
	sampler_rx
);
input [3:0] Abajo;
input [1:0] accion_out;
input [3:0] actual;
input [3:0] Adelante;
input [3:0] Arriba;
input [3:0] Atras;
input [3:0] C0;
input [3:0] C2;
input [3:0] C3;
input [3:0] C4;
input [3:0] C5;
input [3:0] C6;
input [3:0] C7;
input [3:0] C8;
input [3:0] C9;
input [3:0] C10;
input [3:0] C11;
input [3:0] C12;
input [3:0] C13;
input [3:0] C14;
input [3:0] C15;
input [3:0] CE1;
input  D_Abajo;
input  D_Adelante;
input  D_Arriba;
input  D_Atras;
input [3:0] dir_Abajo;
input [3:0] dir_Adelante;
input [3:0] dir_Arriba;
input [3:0] dir_Atras;
input  ena_Ab;
input  ena_Ad;
input  ena_Ar;
input  ena_At;
input  Hab_accion29;
input  Hab_Actual28;
input  Hab_muro;
input  Hab_sentido27;
input [1:0] sentido;
input [1:0] sentido_nw;
input  Y15;
input sampler_rx;

reg [3:0] Abajo_expected;
reg [1:0] accion_out_expected;
reg [3:0] actual_expected;
reg [3:0] Adelante_expected;
reg [3:0] Arriba_expected;
reg [3:0] Atras_expected;
reg [3:0] C0_expected;
reg [3:0] C2_expected;
reg [3:0] C3_expected;
reg [3:0] C4_expected;
reg [3:0] C5_expected;
reg [3:0] C6_expected;
reg [3:0] C7_expected;
reg [3:0] C8_expected;
reg [3:0] C9_expected;
reg [3:0] C10_expected;
reg [3:0] C11_expected;
reg [3:0] C12_expected;
reg [3:0] C13_expected;
reg [3:0] C14_expected;
reg [3:0] C15_expected;
reg [3:0] CE1_expected;
reg  D_Abajo_expected;
reg  D_Adelante_expected;
reg  D_Arriba_expected;
reg  D_Atras_expected;
reg [3:0] dir_Abajo_expected;
reg [3:0] dir_Adelante_expected;
reg [3:0] dir_Arriba_expected;
reg [3:0] dir_Atras_expected;
reg  ena_Ab_expected;
reg  ena_Ad_expected;
reg  ena_Ar_expected;
reg  ena_At_expected;
reg  Hab_accion29_expected;
reg  Hab_Actual28_expected;
reg  Hab_muro_expected;
reg  Hab_sentido27_expected;
reg [1:0] sentido_expected;
reg [1:0] sentido_nw_expected;
reg  Y15_expected;

reg [3:0] Abajo_prev;
reg [1:0] accion_out_prev;
reg [3:0] actual_prev;
reg [3:0] Adelante_prev;
reg [3:0] Arriba_prev;
reg [3:0] Atras_prev;
reg [3:0] C0_prev;
reg [3:0] C2_prev;
reg [3:0] C3_prev;
reg [3:0] C4_prev;
reg [3:0] C5_prev;
reg [3:0] C6_prev;
reg [3:0] C7_prev;
reg [3:0] C8_prev;
reg [3:0] C9_prev;
reg [3:0] C10_prev;
reg [3:0] C11_prev;
reg [3:0] C12_prev;
reg [3:0] C13_prev;
reg [3:0] C14_prev;
reg [3:0] C15_prev;
reg [3:0] CE1_prev;
reg  D_Abajo_prev;
reg  D_Adelante_prev;
reg  D_Arriba_prev;
reg  D_Atras_prev;
reg [3:0] dir_Abajo_prev;
reg [3:0] dir_Adelante_prev;
reg [3:0] dir_Arriba_prev;
reg [3:0] dir_Atras_prev;
reg  ena_Ab_prev;
reg  ena_Ad_prev;
reg  ena_Ar_prev;
reg  ena_At_prev;
reg  Hab_accion29_prev;
reg  Hab_Actual28_prev;
reg  Hab_muro_prev;
reg  Hab_sentido27_prev;
reg [1:0] sentido_prev;
reg [1:0] sentido_nw_prev;
reg  Y15_prev;

reg [1:0] accion_out_expected_prev;
reg [3:0] actual_expected_prev;
reg [3:0] C0_expected_prev;
reg [3:0] C2_expected_prev;
reg [3:0] C3_expected_prev;
reg [3:0] C4_expected_prev;
reg [3:0] C5_expected_prev;
reg [3:0] C6_expected_prev;
reg [3:0] C7_expected_prev;
reg [3:0] C8_expected_prev;
reg [3:0] C9_expected_prev;
reg [3:0] C10_expected_prev;
reg [3:0] C11_expected_prev;
reg [3:0] C12_expected_prev;
reg [3:0] C13_expected_prev;
reg [3:0] C14_expected_prev;
reg [3:0] C15_expected_prev;
reg [3:0] CE1_expected_prev;
reg [1:0] sentido_expected_prev;
reg [1:0] sentido_nw_expected_prev;

reg [1:0] last_accion_out_exp;
reg [3:0] last_actual_exp;
reg [3:0] last_C0_exp;
reg [3:0] last_C2_exp;
reg [3:0] last_C3_exp;
reg [3:0] last_C4_exp;
reg [3:0] last_C5_exp;
reg [3:0] last_C6_exp;
reg [3:0] last_C7_exp;
reg [3:0] last_C8_exp;
reg [3:0] last_C9_exp;
reg [3:0] last_C10_exp;
reg [3:0] last_C11_exp;
reg [3:0] last_C12_exp;
reg [3:0] last_C13_exp;
reg [3:0] last_C14_exp;
reg [3:0] last_C15_exp;
reg [3:0] last_CE1_exp;
reg [1:0] last_sentido_exp;
reg [1:0] last_sentido_nw_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:41] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 41'b1;
end

// update real /o prevs

always @(trigger)
begin
	Abajo_prev = Abajo;
	accion_out_prev = accion_out;
	actual_prev = actual;
	Adelante_prev = Adelante;
	Arriba_prev = Arriba;
	Atras_prev = Atras;
	C0_prev = C0;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	C5_prev = C5;
	C6_prev = C6;
	C7_prev = C7;
	C8_prev = C8;
	C9_prev = C9;
	C10_prev = C10;
	C11_prev = C11;
	C12_prev = C12;
	C13_prev = C13;
	C14_prev = C14;
	C15_prev = C15;
	CE1_prev = CE1;
	D_Abajo_prev = D_Abajo;
	D_Adelante_prev = D_Adelante;
	D_Arriba_prev = D_Arriba;
	D_Atras_prev = D_Atras;
	dir_Abajo_prev = dir_Abajo;
	dir_Adelante_prev = dir_Adelante;
	dir_Arriba_prev = dir_Arriba;
	dir_Atras_prev = dir_Atras;
	ena_Ab_prev = ena_Ab;
	ena_Ad_prev = ena_Ad;
	ena_Ar_prev = ena_Ar;
	ena_At_prev = ena_At;
	Hab_accion29_prev = Hab_accion29;
	Hab_Actual28_prev = Hab_Actual28;
	Hab_muro_prev = Hab_muro;
	Hab_sentido27_prev = Hab_sentido27;
	sentido_prev = sentido;
	sentido_nw_prev = sentido_nw;
	Y15_prev = Y15;
end

// update expected /o prevs

always @(trigger)
begin
	accion_out_expected_prev = accion_out_expected;
	actual_expected_prev = actual_expected;
	C0_expected_prev = C0_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	C4_expected_prev = C4_expected;
	C5_expected_prev = C5_expected;
	C6_expected_prev = C6_expected;
	C7_expected_prev = C7_expected;
	C8_expected_prev = C8_expected;
	C9_expected_prev = C9_expected;
	C10_expected_prev = C10_expected;
	C11_expected_prev = C11_expected;
	C12_expected_prev = C12_expected;
	C13_expected_prev = C13_expected;
	C14_expected_prev = C14_expected;
	C15_expected_prev = C15_expected;
	CE1_expected_prev = CE1_expected;
	sentido_expected_prev = sentido_expected;
	sentido_nw_expected_prev = sentido_nw_expected;
end


// expected actual[ 3 ]
initial
begin
	actual_expected[3] = 1'bX;
	actual_expected[3] = #400000 1'b1;
	actual_expected[3] = #40000 1'bX;
end 
// expected actual[ 2 ]
initial
begin
	actual_expected[2] = 1'bX;
	actual_expected[2] = #400000 1'b1;
	actual_expected[2] = #40000 1'bX;
end 
// expected actual[ 1 ]
initial
begin
	actual_expected[1] = 1'bX;
	actual_expected[1] = #400000 1'b1;
	actual_expected[1] = #40000 1'bX;
end 
// expected actual[ 0 ]
initial
begin
	actual_expected[0] = 1'bX;
	actual_expected[0] = #400000 1'b1;
	actual_expected[0] = #40000 1'bX;
end 
// expected sentido[ 1 ]
initial
begin
	sentido_expected[1] = 1'bX;
end 
// expected sentido[ 0 ]
initial
begin
	sentido_expected[0] = 1'bX;
end 
// expected sentido_nw[ 1 ]
initial
begin
	sentido_nw_expected[1] = 1'bX;
end 
// expected sentido_nw[ 0 ]
initial
begin
	sentido_nw_expected[0] = 1'bX;
end 
// expected accion_out[ 1 ]
initial
begin
	accion_out_expected[1] = 1'bX;
end 
// expected accion_out[ 0 ]
initial
begin
	accion_out_expected[0] = 1'bX;
end 
// expected C0[ 3 ]
initial
begin
	C0_expected[3] = 1'bX;
end 
// expected C0[ 2 ]
initial
begin
	C0_expected[2] = 1'bX;
end 
// expected C0[ 1 ]
initial
begin
	C0_expected[1] = 1'bX;
end 
// expected C0[ 0 ]
initial
begin
	C0_expected[0] = 1'bX;
end 
// expected CE1[ 3 ]
initial
begin
	CE1_expected[3] = 1'bX;
end 
// expected CE1[ 2 ]
initial
begin
	CE1_expected[2] = 1'bX;
end 
// expected CE1[ 1 ]
initial
begin
	CE1_expected[1] = 1'bX;
end 
// expected CE1[ 0 ]
initial
begin
	CE1_expected[0] = 1'bX;
end 
// expected C2[ 3 ]
initial
begin
	C2_expected[3] = 1'bX;
end 
// expected C2[ 2 ]
initial
begin
	C2_expected[2] = 1'bX;
end 
// expected C2[ 1 ]
initial
begin
	C2_expected[1] = 1'bX;
end 
// expected C2[ 0 ]
initial
begin
	C2_expected[0] = 1'bX;
end 
// expected C3[ 3 ]
initial
begin
	C3_expected[3] = 1'bX;
end 
// expected C3[ 2 ]
initial
begin
	C3_expected[2] = 1'bX;
end 
// expected C3[ 1 ]
initial
begin
	C3_expected[1] = 1'bX;
end 
// expected C3[ 0 ]
initial
begin
	C3_expected[0] = 1'bX;
end 
// expected C4[ 3 ]
initial
begin
	C4_expected[3] = 1'bX;
end 
// expected C4[ 2 ]
initial
begin
	C4_expected[2] = 1'bX;
end 
// expected C4[ 1 ]
initial
begin
	C4_expected[1] = 1'bX;
end 
// expected C4[ 0 ]
initial
begin
	C4_expected[0] = 1'bX;
end 
// expected C5[ 3 ]
initial
begin
	C5_expected[3] = 1'bX;
end 
// expected C5[ 2 ]
initial
begin
	C5_expected[2] = 1'bX;
end 
// expected C5[ 1 ]
initial
begin
	C5_expected[1] = 1'bX;
end 
// expected C5[ 0 ]
initial
begin
	C5_expected[0] = 1'bX;
end 
// expected C6[ 3 ]
initial
begin
	C6_expected[3] = 1'bX;
end 
// expected C6[ 2 ]
initial
begin
	C6_expected[2] = 1'bX;
end 
// expected C6[ 1 ]
initial
begin
	C6_expected[1] = 1'bX;
end 
// expected C6[ 0 ]
initial
begin
	C6_expected[0] = 1'bX;
end 
// expected C7[ 3 ]
initial
begin
	C7_expected[3] = 1'bX;
end 
// expected C7[ 2 ]
initial
begin
	C7_expected[2] = 1'bX;
end 
// expected C7[ 1 ]
initial
begin
	C7_expected[1] = 1'bX;
end 
// expected C7[ 0 ]
initial
begin
	C7_expected[0] = 1'bX;
end 
// expected C8[ 3 ]
initial
begin
	C8_expected[3] = 1'bX;
end 
// expected C8[ 2 ]
initial
begin
	C8_expected[2] = 1'bX;
end 
// expected C8[ 1 ]
initial
begin
	C8_expected[1] = 1'bX;
end 
// expected C8[ 0 ]
initial
begin
	C8_expected[0] = 1'bX;
end 
// expected C9[ 3 ]
initial
begin
	C9_expected[3] = 1'bX;
end 
// expected C9[ 2 ]
initial
begin
	C9_expected[2] = 1'bX;
end 
// expected C9[ 1 ]
initial
begin
	C9_expected[1] = 1'bX;
end 
// expected C9[ 0 ]
initial
begin
	C9_expected[0] = 1'bX;
end 
// expected C10[ 3 ]
initial
begin
	C10_expected[3] = 1'bX;
end 
// expected C10[ 2 ]
initial
begin
	C10_expected[2] = 1'bX;
end 
// expected C10[ 1 ]
initial
begin
	C10_expected[1] = 1'bX;
end 
// expected C10[ 0 ]
initial
begin
	C10_expected[0] = 1'bX;
end 
// expected C11[ 3 ]
initial
begin
	C11_expected[3] = 1'bX;
end 
// expected C11[ 2 ]
initial
begin
	C11_expected[2] = 1'bX;
end 
// expected C11[ 1 ]
initial
begin
	C11_expected[1] = 1'bX;
end 
// expected C11[ 0 ]
initial
begin
	C11_expected[0] = 1'bX;
end 
// expected C12[ 3 ]
initial
begin
	C12_expected[3] = 1'bX;
end 
// expected C12[ 2 ]
initial
begin
	C12_expected[2] = 1'bX;
end 
// expected C12[ 1 ]
initial
begin
	C12_expected[1] = 1'bX;
end 
// expected C12[ 0 ]
initial
begin
	C12_expected[0] = 1'bX;
end 
// expected C13[ 3 ]
initial
begin
	C13_expected[3] = 1'bX;
end 
// expected C13[ 2 ]
initial
begin
	C13_expected[2] = 1'bX;
end 
// expected C13[ 1 ]
initial
begin
	C13_expected[1] = 1'bX;
end 
// expected C13[ 0 ]
initial
begin
	C13_expected[0] = 1'bX;
end 
// expected C14[ 3 ]
initial
begin
	C14_expected[3] = 1'bX;
end 
// expected C14[ 2 ]
initial
begin
	C14_expected[2] = 1'bX;
end 
// expected C14[ 1 ]
initial
begin
	C14_expected[1] = 1'bX;
end 
// expected C14[ 0 ]
initial
begin
	C14_expected[0] = 1'bX;
end 
// expected C15[ 3 ]
initial
begin
	C15_expected[3] = 1'bX;
end 
// expected C15[ 2 ]
initial
begin
	C15_expected[2] = 1'bX;
end 
// expected C15[ 1 ]
initial
begin
	C15_expected[1] = 1'bX;
end 
// expected C15[ 0 ]
initial
begin
	C15_expected[0] = 1'bX;
end 
// generate trigger
always @(Abajo_expected or Abajo or accion_out_expected or accion_out or actual_expected or actual or Adelante_expected or Adelante or Arriba_expected or Arriba or Atras_expected or Atras or C0_expected or C0 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or C5_expected or C5 or C6_expected or C6 or C7_expected or C7 or C8_expected or C8 or C9_expected or C9 or C10_expected or C10 or C11_expected or C11 or C12_expected or C12 or C13_expected or C13 or C14_expected or C14 or C15_expected or C15 or CE1_expected or CE1 or D_Abajo_expected or D_Abajo or D_Adelante_expected or D_Adelante or D_Arriba_expected or D_Arriba or D_Atras_expected or D_Atras or dir_Abajo_expected or dir_Abajo or dir_Adelante_expected or dir_Adelante or dir_Arriba_expected or dir_Arriba or dir_Atras_expected or dir_Atras or ena_Ab_expected or ena_Ab or ena_Ad_expected or ena_Ad or ena_Ar_expected or ena_Ar or ena_At_expected or ena_At or Hab_accion29_expected or Hab_accion29 or Hab_Actual28_expected or Hab_Actual28 or Hab_muro_expected or Hab_muro or Hab_sentido27_expected or Hab_sentido27 or sentido_expected or sentido or sentido_nw_expected or sentido_nw or Y15_expected or Y15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Abajo = %b | expected accion_out = %b | expected actual = %b | expected Adelante = %b | expected Arriba = %b | expected Atras = %b | expected C0 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected C5 = %b | expected C6 = %b | expected C7 = %b | expected C8 = %b | expected C9 = %b | expected C10 = %b | expected C11 = %b | expected C12 = %b | expected C13 = %b | expected C14 = %b | expected C15 = %b | expected CE1 = %b | expected D_Abajo = %b | expected D_Adelante = %b | expected D_Arriba = %b | expected D_Atras = %b | expected dir_Abajo = %b | expected dir_Adelante = %b | expected dir_Arriba = %b | expected dir_Atras = %b | expected ena_Ab = %b | expected ena_Ad = %b | expected ena_Ar = %b | expected ena_At = %b | expected Hab_accion29 = %b | expected Hab_Actual28 = %b | expected Hab_muro = %b | expected Hab_sentido27 = %b | expected sentido = %b | expected sentido_nw = %b | expected Y15 = %b | ",Abajo_expected_prev,accion_out_expected_prev,actual_expected_prev,Adelante_expected_prev,Arriba_expected_prev,Atras_expected_prev,C0_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,C5_expected_prev,C6_expected_prev,C7_expected_prev,C8_expected_prev,C9_expected_prev,C10_expected_prev,C11_expected_prev,C12_expected_prev,C13_expected_prev,C14_expected_prev,C15_expected_prev,CE1_expected_prev,D_Abajo_expected_prev,D_Adelante_expected_prev,D_Arriba_expected_prev,D_Atras_expected_prev,dir_Abajo_expected_prev,dir_Adelante_expected_prev,dir_Arriba_expected_prev,dir_Atras_expected_prev,ena_Ab_expected_prev,ena_Ad_expected_prev,ena_Ar_expected_prev,ena_At_expected_prev,Hab_accion29_expected_prev,Hab_Actual28_expected_prev,Hab_muro_expected_prev,Hab_sentido27_expected_prev,sentido_expected_prev,sentido_nw_expected_prev,Y15_expected_prev);
	$display("| real Abajo = %b | real accion_out = %b | real actual = %b | real Adelante = %b | real Arriba = %b | real Atras = %b | real C0 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real C5 = %b | real C6 = %b | real C7 = %b | real C8 = %b | real C9 = %b | real C10 = %b | real C11 = %b | real C12 = %b | real C13 = %b | real C14 = %b | real C15 = %b | real CE1 = %b | real D_Abajo = %b | real D_Adelante = %b | real D_Arriba = %b | real D_Atras = %b | real dir_Abajo = %b | real dir_Adelante = %b | real dir_Arriba = %b | real dir_Atras = %b | real ena_Ab = %b | real ena_Ad = %b | real ena_Ar = %b | real ena_At = %b | real Hab_accion29 = %b | real Hab_Actual28 = %b | real Hab_muro = %b | real Hab_sentido27 = %b | real sentido = %b | real sentido_nw = %b | real Y15 = %b | ",Abajo_prev,accion_out_prev,actual_prev,Adelante_prev,Arriba_prev,Atras_prev,C0_prev,C2_prev,C3_prev,C4_prev,C5_prev,C6_prev,C7_prev,C8_prev,C9_prev,C10_prev,C11_prev,C12_prev,C13_prev,C14_prev,C15_prev,CE1_prev,D_Abajo_prev,D_Adelante_prev,D_Arriba_prev,D_Atras_prev,dir_Abajo_prev,dir_Adelante_prev,dir_Arriba_prev,dir_Atras_prev,ena_Ab_prev,ena_Ad_prev,ena_Ar_prev,ena_At_prev,Hab_accion29_prev,Hab_Actual28_prev,Hab_muro_prev,Hab_sentido27_prev,sentido_prev,sentido_nw_prev,Y15_prev);
`endif
	if (
		( accion_out_expected_prev[0] !== 1'bx ) && ( accion_out_prev[0] !== accion_out_expected_prev[0] )
		&& ((accion_out_expected_prev[0] !== last_accion_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accion_out_exp[0] = accion_out_expected_prev[0];
	end
	if (
		( accion_out_expected_prev[1] !== 1'bx ) && ( accion_out_prev[1] !== accion_out_expected_prev[1] )
		&& ((accion_out_expected_prev[1] !== last_accion_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accion_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accion_out_expected_prev);
		$display ("     Real value = %b", accion_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accion_out_exp[1] = accion_out_expected_prev[1];
	end
	if (
		( actual_expected_prev[0] !== 1'bx ) && ( actual_prev[0] !== actual_expected_prev[0] )
		&& ((actual_expected_prev[0] !== last_actual_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_actual_exp[0] = actual_expected_prev[0];
	end
	if (
		( actual_expected_prev[1] !== 1'bx ) && ( actual_prev[1] !== actual_expected_prev[1] )
		&& ((actual_expected_prev[1] !== last_actual_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_actual_exp[1] = actual_expected_prev[1];
	end
	if (
		( actual_expected_prev[2] !== 1'bx ) && ( actual_prev[2] !== actual_expected_prev[2] )
		&& ((actual_expected_prev[2] !== last_actual_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_actual_exp[2] = actual_expected_prev[2];
	end
	if (
		( actual_expected_prev[3] !== 1'bx ) && ( actual_prev[3] !== actual_expected_prev[3] )
		&& ((actual_expected_prev[3] !== last_actual_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port actual[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", actual_expected_prev);
		$display ("     Real value = %b", actual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_actual_exp[3] = actual_expected_prev[3];
	end
	if (
		( C0_expected_prev[0] !== 1'bx ) && ( C0_prev[0] !== C0_expected_prev[0] )
		&& ((C0_expected_prev[0] !== last_C0_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C0_exp[0] = C0_expected_prev[0];
	end
	if (
		( C0_expected_prev[1] !== 1'bx ) && ( C0_prev[1] !== C0_expected_prev[1] )
		&& ((C0_expected_prev[1] !== last_C0_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C0_exp[1] = C0_expected_prev[1];
	end
	if (
		( C0_expected_prev[2] !== 1'bx ) && ( C0_prev[2] !== C0_expected_prev[2] )
		&& ((C0_expected_prev[2] !== last_C0_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C0_exp[2] = C0_expected_prev[2];
	end
	if (
		( C0_expected_prev[3] !== 1'bx ) && ( C0_prev[3] !== C0_expected_prev[3] )
		&& ((C0_expected_prev[3] !== last_C0_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C0_expected_prev);
		$display ("     Real value = %b", C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C0_exp[3] = C0_expected_prev[3];
	end
	if (
		( C2_expected_prev[0] !== 1'bx ) && ( C2_prev[0] !== C2_expected_prev[0] )
		&& ((C2_expected_prev[0] !== last_C2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C2_exp[0] = C2_expected_prev[0];
	end
	if (
		( C2_expected_prev[1] !== 1'bx ) && ( C2_prev[1] !== C2_expected_prev[1] )
		&& ((C2_expected_prev[1] !== last_C2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C2_exp[1] = C2_expected_prev[1];
	end
	if (
		( C2_expected_prev[2] !== 1'bx ) && ( C2_prev[2] !== C2_expected_prev[2] )
		&& ((C2_expected_prev[2] !== last_C2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C2_exp[2] = C2_expected_prev[2];
	end
	if (
		( C2_expected_prev[3] !== 1'bx ) && ( C2_prev[3] !== C2_expected_prev[3] )
		&& ((C2_expected_prev[3] !== last_C2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C2_exp[3] = C2_expected_prev[3];
	end
	if (
		( C3_expected_prev[0] !== 1'bx ) && ( C3_prev[0] !== C3_expected_prev[0] )
		&& ((C3_expected_prev[0] !== last_C3_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C3_exp[0] = C3_expected_prev[0];
	end
	if (
		( C3_expected_prev[1] !== 1'bx ) && ( C3_prev[1] !== C3_expected_prev[1] )
		&& ((C3_expected_prev[1] !== last_C3_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C3_exp[1] = C3_expected_prev[1];
	end
	if (
		( C3_expected_prev[2] !== 1'bx ) && ( C3_prev[2] !== C3_expected_prev[2] )
		&& ((C3_expected_prev[2] !== last_C3_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C3_exp[2] = C3_expected_prev[2];
	end
	if (
		( C3_expected_prev[3] !== 1'bx ) && ( C3_prev[3] !== C3_expected_prev[3] )
		&& ((C3_expected_prev[3] !== last_C3_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C3_exp[3] = C3_expected_prev[3];
	end
	if (
		( C4_expected_prev[0] !== 1'bx ) && ( C4_prev[0] !== C4_expected_prev[0] )
		&& ((C4_expected_prev[0] !== last_C4_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C4_exp[0] = C4_expected_prev[0];
	end
	if (
		( C4_expected_prev[1] !== 1'bx ) && ( C4_prev[1] !== C4_expected_prev[1] )
		&& ((C4_expected_prev[1] !== last_C4_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C4_exp[1] = C4_expected_prev[1];
	end
	if (
		( C4_expected_prev[2] !== 1'bx ) && ( C4_prev[2] !== C4_expected_prev[2] )
		&& ((C4_expected_prev[2] !== last_C4_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C4_exp[2] = C4_expected_prev[2];
	end
	if (
		( C4_expected_prev[3] !== 1'bx ) && ( C4_prev[3] !== C4_expected_prev[3] )
		&& ((C4_expected_prev[3] !== last_C4_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C4_exp[3] = C4_expected_prev[3];
	end
	if (
		( C5_expected_prev[0] !== 1'bx ) && ( C5_prev[0] !== C5_expected_prev[0] )
		&& ((C5_expected_prev[0] !== last_C5_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C5_exp[0] = C5_expected_prev[0];
	end
	if (
		( C5_expected_prev[1] !== 1'bx ) && ( C5_prev[1] !== C5_expected_prev[1] )
		&& ((C5_expected_prev[1] !== last_C5_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C5_exp[1] = C5_expected_prev[1];
	end
	if (
		( C5_expected_prev[2] !== 1'bx ) && ( C5_prev[2] !== C5_expected_prev[2] )
		&& ((C5_expected_prev[2] !== last_C5_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C5_exp[2] = C5_expected_prev[2];
	end
	if (
		( C5_expected_prev[3] !== 1'bx ) && ( C5_prev[3] !== C5_expected_prev[3] )
		&& ((C5_expected_prev[3] !== last_C5_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C5_exp[3] = C5_expected_prev[3];
	end
	if (
		( C6_expected_prev[0] !== 1'bx ) && ( C6_prev[0] !== C6_expected_prev[0] )
		&& ((C6_expected_prev[0] !== last_C6_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C6_exp[0] = C6_expected_prev[0];
	end
	if (
		( C6_expected_prev[1] !== 1'bx ) && ( C6_prev[1] !== C6_expected_prev[1] )
		&& ((C6_expected_prev[1] !== last_C6_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C6_exp[1] = C6_expected_prev[1];
	end
	if (
		( C6_expected_prev[2] !== 1'bx ) && ( C6_prev[2] !== C6_expected_prev[2] )
		&& ((C6_expected_prev[2] !== last_C6_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C6_exp[2] = C6_expected_prev[2];
	end
	if (
		( C6_expected_prev[3] !== 1'bx ) && ( C6_prev[3] !== C6_expected_prev[3] )
		&& ((C6_expected_prev[3] !== last_C6_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C6_exp[3] = C6_expected_prev[3];
	end
	if (
		( C7_expected_prev[0] !== 1'bx ) && ( C7_prev[0] !== C7_expected_prev[0] )
		&& ((C7_expected_prev[0] !== last_C7_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C7_exp[0] = C7_expected_prev[0];
	end
	if (
		( C7_expected_prev[1] !== 1'bx ) && ( C7_prev[1] !== C7_expected_prev[1] )
		&& ((C7_expected_prev[1] !== last_C7_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C7_exp[1] = C7_expected_prev[1];
	end
	if (
		( C7_expected_prev[2] !== 1'bx ) && ( C7_prev[2] !== C7_expected_prev[2] )
		&& ((C7_expected_prev[2] !== last_C7_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C7_exp[2] = C7_expected_prev[2];
	end
	if (
		( C7_expected_prev[3] !== 1'bx ) && ( C7_prev[3] !== C7_expected_prev[3] )
		&& ((C7_expected_prev[3] !== last_C7_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C7_exp[3] = C7_expected_prev[3];
	end
	if (
		( C8_expected_prev[0] !== 1'bx ) && ( C8_prev[0] !== C8_expected_prev[0] )
		&& ((C8_expected_prev[0] !== last_C8_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C8_exp[0] = C8_expected_prev[0];
	end
	if (
		( C8_expected_prev[1] !== 1'bx ) && ( C8_prev[1] !== C8_expected_prev[1] )
		&& ((C8_expected_prev[1] !== last_C8_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C8_exp[1] = C8_expected_prev[1];
	end
	if (
		( C8_expected_prev[2] !== 1'bx ) && ( C8_prev[2] !== C8_expected_prev[2] )
		&& ((C8_expected_prev[2] !== last_C8_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C8_exp[2] = C8_expected_prev[2];
	end
	if (
		( C8_expected_prev[3] !== 1'bx ) && ( C8_prev[3] !== C8_expected_prev[3] )
		&& ((C8_expected_prev[3] !== last_C8_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C8_expected_prev);
		$display ("     Real value = %b", C8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C8_exp[3] = C8_expected_prev[3];
	end
	if (
		( C9_expected_prev[0] !== 1'bx ) && ( C9_prev[0] !== C9_expected_prev[0] )
		&& ((C9_expected_prev[0] !== last_C9_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C9_exp[0] = C9_expected_prev[0];
	end
	if (
		( C9_expected_prev[1] !== 1'bx ) && ( C9_prev[1] !== C9_expected_prev[1] )
		&& ((C9_expected_prev[1] !== last_C9_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C9_exp[1] = C9_expected_prev[1];
	end
	if (
		( C9_expected_prev[2] !== 1'bx ) && ( C9_prev[2] !== C9_expected_prev[2] )
		&& ((C9_expected_prev[2] !== last_C9_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C9_exp[2] = C9_expected_prev[2];
	end
	if (
		( C9_expected_prev[3] !== 1'bx ) && ( C9_prev[3] !== C9_expected_prev[3] )
		&& ((C9_expected_prev[3] !== last_C9_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C9[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C9_expected_prev);
		$display ("     Real value = %b", C9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C9_exp[3] = C9_expected_prev[3];
	end
	if (
		( C10_expected_prev[0] !== 1'bx ) && ( C10_prev[0] !== C10_expected_prev[0] )
		&& ((C10_expected_prev[0] !== last_C10_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C10_exp[0] = C10_expected_prev[0];
	end
	if (
		( C10_expected_prev[1] !== 1'bx ) && ( C10_prev[1] !== C10_expected_prev[1] )
		&& ((C10_expected_prev[1] !== last_C10_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C10_exp[1] = C10_expected_prev[1];
	end
	if (
		( C10_expected_prev[2] !== 1'bx ) && ( C10_prev[2] !== C10_expected_prev[2] )
		&& ((C10_expected_prev[2] !== last_C10_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C10_exp[2] = C10_expected_prev[2];
	end
	if (
		( C10_expected_prev[3] !== 1'bx ) && ( C10_prev[3] !== C10_expected_prev[3] )
		&& ((C10_expected_prev[3] !== last_C10_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C10[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C10_expected_prev);
		$display ("     Real value = %b", C10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C10_exp[3] = C10_expected_prev[3];
	end
	if (
		( C11_expected_prev[0] !== 1'bx ) && ( C11_prev[0] !== C11_expected_prev[0] )
		&& ((C11_expected_prev[0] !== last_C11_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C11_exp[0] = C11_expected_prev[0];
	end
	if (
		( C11_expected_prev[1] !== 1'bx ) && ( C11_prev[1] !== C11_expected_prev[1] )
		&& ((C11_expected_prev[1] !== last_C11_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C11_exp[1] = C11_expected_prev[1];
	end
	if (
		( C11_expected_prev[2] !== 1'bx ) && ( C11_prev[2] !== C11_expected_prev[2] )
		&& ((C11_expected_prev[2] !== last_C11_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C11_exp[2] = C11_expected_prev[2];
	end
	if (
		( C11_expected_prev[3] !== 1'bx ) && ( C11_prev[3] !== C11_expected_prev[3] )
		&& ((C11_expected_prev[3] !== last_C11_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C11[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C11_expected_prev);
		$display ("     Real value = %b", C11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C11_exp[3] = C11_expected_prev[3];
	end
	if (
		( C12_expected_prev[0] !== 1'bx ) && ( C12_prev[0] !== C12_expected_prev[0] )
		&& ((C12_expected_prev[0] !== last_C12_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_C12_exp[0] = C12_expected_prev[0];
	end
	if (
		( C12_expected_prev[1] !== 1'bx ) && ( C12_prev[1] !== C12_expected_prev[1] )
		&& ((C12_expected_prev[1] !== last_C12_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_C12_exp[1] = C12_expected_prev[1];
	end
	if (
		( C12_expected_prev[2] !== 1'bx ) && ( C12_prev[2] !== C12_expected_prev[2] )
		&& ((C12_expected_prev[2] !== last_C12_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_C12_exp[2] = C12_expected_prev[2];
	end
	if (
		( C12_expected_prev[3] !== 1'bx ) && ( C12_prev[3] !== C12_expected_prev[3] )
		&& ((C12_expected_prev[3] !== last_C12_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C12[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C12_expected_prev);
		$display ("     Real value = %b", C12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_C12_exp[3] = C12_expected_prev[3];
	end
	if (
		( C13_expected_prev[0] !== 1'bx ) && ( C13_prev[0] !== C13_expected_prev[0] )
		&& ((C13_expected_prev[0] !== last_C13_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_C13_exp[0] = C13_expected_prev[0];
	end
	if (
		( C13_expected_prev[1] !== 1'bx ) && ( C13_prev[1] !== C13_expected_prev[1] )
		&& ((C13_expected_prev[1] !== last_C13_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_C13_exp[1] = C13_expected_prev[1];
	end
	if (
		( C13_expected_prev[2] !== 1'bx ) && ( C13_prev[2] !== C13_expected_prev[2] )
		&& ((C13_expected_prev[2] !== last_C13_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_C13_exp[2] = C13_expected_prev[2];
	end
	if (
		( C13_expected_prev[3] !== 1'bx ) && ( C13_prev[3] !== C13_expected_prev[3] )
		&& ((C13_expected_prev[3] !== last_C13_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C13[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C13_expected_prev);
		$display ("     Real value = %b", C13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_C13_exp[3] = C13_expected_prev[3];
	end
	if (
		( C14_expected_prev[0] !== 1'bx ) && ( C14_prev[0] !== C14_expected_prev[0] )
		&& ((C14_expected_prev[0] !== last_C14_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_C14_exp[0] = C14_expected_prev[0];
	end
	if (
		( C14_expected_prev[1] !== 1'bx ) && ( C14_prev[1] !== C14_expected_prev[1] )
		&& ((C14_expected_prev[1] !== last_C14_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_C14_exp[1] = C14_expected_prev[1];
	end
	if (
		( C14_expected_prev[2] !== 1'bx ) && ( C14_prev[2] !== C14_expected_prev[2] )
		&& ((C14_expected_prev[2] !== last_C14_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_C14_exp[2] = C14_expected_prev[2];
	end
	if (
		( C14_expected_prev[3] !== 1'bx ) && ( C14_prev[3] !== C14_expected_prev[3] )
		&& ((C14_expected_prev[3] !== last_C14_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C14[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C14_expected_prev);
		$display ("     Real value = %b", C14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_C14_exp[3] = C14_expected_prev[3];
	end
	if (
		( C15_expected_prev[0] !== 1'bx ) && ( C15_prev[0] !== C15_expected_prev[0] )
		&& ((C15_expected_prev[0] !== last_C15_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_C15_exp[0] = C15_expected_prev[0];
	end
	if (
		( C15_expected_prev[1] !== 1'bx ) && ( C15_prev[1] !== C15_expected_prev[1] )
		&& ((C15_expected_prev[1] !== last_C15_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_C15_exp[1] = C15_expected_prev[1];
	end
	if (
		( C15_expected_prev[2] !== 1'bx ) && ( C15_prev[2] !== C15_expected_prev[2] )
		&& ((C15_expected_prev[2] !== last_C15_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_C15_exp[2] = C15_expected_prev[2];
	end
	if (
		( C15_expected_prev[3] !== 1'bx ) && ( C15_prev[3] !== C15_expected_prev[3] )
		&& ((C15_expected_prev[3] !== last_C15_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C15[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C15_expected_prev);
		$display ("     Real value = %b", C15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_C15_exp[3] = C15_expected_prev[3];
	end
	if (
		( CE1_expected_prev[0] !== 1'bx ) && ( CE1_prev[0] !== CE1_expected_prev[0] )
		&& ((CE1_expected_prev[0] !== last_CE1_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_CE1_exp[0] = CE1_expected_prev[0];
	end
	if (
		( CE1_expected_prev[1] !== 1'bx ) && ( CE1_prev[1] !== CE1_expected_prev[1] )
		&& ((CE1_expected_prev[1] !== last_CE1_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_CE1_exp[1] = CE1_expected_prev[1];
	end
	if (
		( CE1_expected_prev[2] !== 1'bx ) && ( CE1_prev[2] !== CE1_expected_prev[2] )
		&& ((CE1_expected_prev[2] !== last_CE1_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_CE1_exp[2] = CE1_expected_prev[2];
	end
	if (
		( CE1_expected_prev[3] !== 1'bx ) && ( CE1_prev[3] !== CE1_expected_prev[3] )
		&& ((CE1_expected_prev[3] !== last_CE1_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CE1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CE1_expected_prev);
		$display ("     Real value = %b", CE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_CE1_exp[3] = CE1_expected_prev[3];
	end
	if (
		( sentido_expected_prev[0] !== 1'bx ) && ( sentido_prev[0] !== sentido_expected_prev[0] )
		&& ((sentido_expected_prev[0] !== last_sentido_exp[0]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sentido[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sentido_expected_prev);
		$display ("     Real value = %b", sentido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_sentido_exp[0] = sentido_expected_prev[0];
	end
	if (
		( sentido_expected_prev[1] !== 1'bx ) && ( sentido_prev[1] !== sentido_expected_prev[1] )
		&& ((sentido_expected_prev[1] !== last_sentido_exp[1]) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sentido[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sentido_expected_prev);
		$display ("     Real value = %b", sentido_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_sentido_exp[1] = sentido_expected_prev[1];
	end
	if (
		( sentido_nw_expected_prev[0] !== 1'bx ) && ( sentido_nw_prev[0] !== sentido_nw_expected_prev[0] )
		&& ((sentido_nw_expected_prev[0] !== last_sentido_nw_exp[0]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sentido_nw[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sentido_nw_expected_prev);
		$display ("     Real value = %b", sentido_nw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_sentido_nw_exp[0] = sentido_nw_expected_prev[0];
	end
	if (
		( sentido_nw_expected_prev[1] !== 1'bx ) && ( sentido_nw_prev[1] !== sentido_nw_expected_prev[1] )
		&& ((sentido_nw_expected_prev[1] !== last_sentido_nw_exp[1]) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sentido_nw[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sentido_nw_expected_prev);
		$display ("     Real value = %b", sentido_nw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_sentido_nw_exp[1] = sentido_nw_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module matriz_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Linea;
reg Muro;
reg reset;
// wires                                               
wire [3:0] Abajo;
wire [1:0] accion_out;
wire [3:0] actual;
wire [3:0] Adelante;
wire [3:0] Arriba;
wire [3:0] Atras;
wire [3:0] C0;
wire [3:0] C2;
wire [3:0] C3;
wire [3:0] C4;
wire [3:0] C5;
wire [3:0] C6;
wire [3:0] C7;
wire [3:0] C8;
wire [3:0] C9;
wire [3:0] C10;
wire [3:0] C11;
wire [3:0] C12;
wire [3:0] C13;
wire [3:0] C14;
wire [3:0] C15;
wire [3:0] CE1;
wire D_Abajo;
wire D_Adelante;
wire D_Arriba;
wire D_Atras;
wire [3:0] dir_Abajo;
wire [3:0] dir_Adelante;
wire [3:0] dir_Arriba;
wire [3:0] dir_Atras;
wire ena_Ab;
wire ena_Ad;
wire ena_Ar;
wire ena_At;
wire Hab_accion29;
wire Hab_Actual28;
wire Hab_muro;
wire Hab_sentido27;
wire [1:0] sentido;
wire [1:0] sentido_nw;
wire Y15;

wire sampler;                             

// assign statements (if any)                          
matriz i1 (
// port map - connection between master ports and signals/registers   
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Adelante(Adelante),
	.Arriba(Arriba),
	.Atras(Atras),
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.clk(clk),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.Hab_accion29(Hab_accion29),
	.Hab_Actual28(Hab_Actual28),
	.Hab_muro(Hab_muro),
	.Hab_sentido27(Hab_sentido27),
	.Linea(Linea),
	.Muro(Muro),
	.reset(reset),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.Y15(Y15)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #60000 1'b0;
end 

// Linea
initial
begin
	Linea = 1'b0;
	Linea = #250000 1'b1;
	Linea = #40000 1'b0;
end 

// Muro
initial
begin
	Muro = 1'b0;
	Muro = #400000 1'b1;
	Muro = #40000 1'b0;
end 

matriz_vlg_sample_tst tb_sample (
	.clk(clk),
	.Linea(Linea),
	.Muro(Muro),
	.reset(reset),
	.sampler_tx(sampler)
);

matriz_vlg_check_tst tb_out(
	.Abajo(Abajo),
	.accion_out(accion_out),
	.actual(actual),
	.Adelante(Adelante),
	.Arriba(Arriba),
	.Atras(Atras),
	.C0(C0),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.C8(C8),
	.C9(C9),
	.C10(C10),
	.C11(C11),
	.C12(C12),
	.C13(C13),
	.C14(C14),
	.C15(C15),
	.CE1(CE1),
	.D_Abajo(D_Abajo),
	.D_Adelante(D_Adelante),
	.D_Arriba(D_Arriba),
	.D_Atras(D_Atras),
	.dir_Abajo(dir_Abajo),
	.dir_Adelante(dir_Adelante),
	.dir_Arriba(dir_Arriba),
	.dir_Atras(dir_Atras),
	.ena_Ab(ena_Ab),
	.ena_Ad(ena_Ad),
	.ena_Ar(ena_Ar),
	.ena_At(ena_At),
	.Hab_accion29(Hab_accion29),
	.Hab_Actual28(Hab_Actual28),
	.Hab_muro(Hab_muro),
	.Hab_sentido27(Hab_sentido27),
	.sentido(sentido),
	.sentido_nw(sentido_nw),
	.Y15(Y15),
	.sampler_rx(sampler)
);
endmodule

